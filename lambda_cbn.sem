# The type of expressions. Required.
contype e ::=
  | E0 ( e )
  | Var ID
  | Abs lambda ID . e
  | App e e

# The type of a configuration. Not particularly useful in this case, but
# required for consistancy in stepping.
abstype c ::=
  | Config e

# The type of a substitution in progress. For use in beta reduction.
abstype s ::=
  | Sub e{ID / e}

# A relation to initialize an expression into a configuration ready to be
# stepped. Again not usefull in this case, but required for consistency.
rel init e -> c
{ e -> Config e
}

# A relation from a substitution to the expression that results from that
# substitution being caried out.
rel sub s -> e
{ Sub (Var x', x, e2)       -> e2             when true = eq x x'
; Sub (Abs (x', e'), x, e2) -> Abs (x', e')   when true = eq x x'
; Sub (Abs (x', e'), x, e2) -> Abs (x', e'')  when false = eq x x' and e'' = sub (Sub (e', x, e2))
; Sub (App (e1, e2), x, e3) -> App (e1', e2') when e1' = sub (Sub (e1, x, e3)) and e2' = sub (Sub (e2, x, e3))
}

# The basic relation between configurations which represents a program being
# executed. Required.
rel step c -> c
{ Config (E0 e)                  -> Config e
; Config (App (e1, e2))          -> Config (App (e1', e2)) when Config e1' = step (Config e1)
; Config (App (Abs (x, e1), e2)) -> Config e1'             when e1' = sub (Sub (e1, x, e2))
}